# .github/workflows/drafter.yml
name: Draft new release

on:
  push:
    branches:
      - main

jobs:
  release-draft:
    name: Update Draft Release Notes
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set release date
        run: echo "RELEASE_DATE=$(date -u +\"%Y-%m-%d\")" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh

      - name: Authenticate gh CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Run Release Drafter
        id: release-drafter
        uses: release-drafter/release-drafter@v6
        with:
          config-name: drafter-config.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up release notes
        id: clean-notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_DATE: ${{ env.RELEASE_DATE }}
        run: |
          RELEASE_ID=${{ steps.release-drafter.outputs.id }}
          if [ -z "$RELEASE_ID" ]; then
            echo "No release ID found. Skipping cleanup."
            exit 0
          fi

          # 원본 릴리스 노트 가져오기
          BODY=$(gh api repos/${{ github.repository }}/releases/$RELEASE_ID --jq '.body' || echo "")
          if [ -z "$BODY" ]; then
            echo "Could not get release body. Skipping cleanup."
            exit 0
          fi

          # 접두사 제거 및 날짜 플레이스홀더 치환
          CLEANED_BODY=$(echo "$BODY" \
            | sed 's/\[[A-Za-z0-9_-]\+\] //g' \
            | sed "s/RELEASE_DATE_PLACEHOLDER/$RELEASE_DATE/g"
          )

          # cleaned_body를 output으로 내보내기
          echo "cleaned_body<<EOF" >> $GITHUB_OUTPUT
          echo "$CLEANED_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send to Slack
        if: success() && steps.release-drafter.outputs.id
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          RELEASE_VERSION: ${{ steps.release-drafter.outputs.tag_name }}
          RELEASE_URL: ${{ steps.release-drafter.outputs.html_url }}
          RELEASE_DATE: ${{ env.RELEASE_DATE }}
          RELEASE_BODY: ${{ steps.clean-notes.outputs.cleaned_body }}
        run: |
          # 릴리스 노트 마크다운 포맷 변환 (Slack 호환성 향상)
          SLACK_BODY=$(echo "$RELEASE_BODY" | sed 's/###/*/g' | sed 's/##/*/g' | sed 's/#/*/g')

          # 1. 길이 제한 (2000자)
          TRIMMED_BODY=$(echo "$SLACK_BODY" | cut -c1-2000)
          if [ ${#SLACK_BODY} -gt 2000 ]; then
            TRIMMED_BODY="${TRIMMED_BODY}...\n\n(릴리스 노트가 잘렸습니다. 전체 내용은 GitHub에서 확인하세요)"
          fi

          # 2. JSON 이스케이프 처리 (큰따옴표와 백슬래시 처리)
          ESCAPED_BODY=$(echo "$TRIMMED_BODY" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g')

          # 디버깅 - 이스케이프된 내용 확인 (필요시 주석 해제)
          # echo "Escaped body: $ESCAPED_BODY"

          # Slack 페이로드 생성 - JSON 직접 작성 방식으로 수정
          SLACK_PAYLOAD='{
            "text": "🎉 새 릴리스 '${RELEASE_VERSION}' 발행 ('${RELEASE_DATE}')",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "🎉 새 릴리스 발행: '${RELEASE_VERSION}'",
                  "emoji": true
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*발행일:* '${RELEASE_DATE}'"
                }
              },
              {
                "type": "section", 
                "text": {
                  "type": "mrkdwn",
                  "text": "'${ESCAPED_BODY}'"
                }
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "GitHub에서 보기"
                    },
                    "url": "'${RELEASE_URL}'"
                  }
                ]
              }
            ]
          }'

          # 최종 페이로드 디버깅 (필요시 주석 해제)
          # echo "Final payload: $SLACK_PAYLOAD"

          # 메시지 전송
          curl -X POST -H 'Content-Type: application/json' --data "$SLACK_PAYLOAD" "$SLACK_WEBHOOK_URL" || echo "Slack 전송에 실패했습니다"
              if: success() && steps.release-drafter.outputs.id
              env:
                SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
                RELEASE_VERSION: ${{ steps.release-drafter.outputs.tag_name }}
                RELEASE_URL: ${{ steps.release-drafter.outputs.html_url }}
                RELEASE_DATE: ${{ env.RELEASE_DATE }}
                RELEASE_BODY: ${{ steps.clean-notes.outputs.cleaned_body }}
              run: |
                # 릴리스 노트 내용을 안전하게 처리
                # 1. 길이 제한 (2000자)
                TRIMMED_BODY=$(echo "$RELEASE_BODY" | cut -c1-2000)
                if [ ${#RELEASE_BODY} -gt 2000 ]; then
                  TRIMMED_BODY="${TRIMMED_BODY}...\n\n(릴리스 노트가 잘렸습니다. 전체 내용은 GitHub에서 확인하세요)"
                fi
                
                # 2. JSON 이스케이프 처리
                ESCAPED_BODY=$(echo "$TRIMMED_BODY" | jq -R -s '.')
                
                # Slack 페이로드 생성 (이스케이프된 본문 사용)
                SLACK_PAYLOAD=$(cat <<EOF
                {
                  "text": "🎉 새 릴리스 ${RELEASE_VERSION} 발행 (${RELEASE_DATE})",
                  "blocks": [
                    {
                      "type": "header",
                      "text": {
                        "type": "plain_text",
                        "text": "🎉 새 릴리스 발행: ${RELEASE_VERSION}",
                        "emoji": true
                      }
                    },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "*발행일:* ${RELEASE_DATE}"
                      }
                    },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": ${ESCAPED_BODY}
                      }
                    },
                    {
                      "type": "actions",
                      "elements": [
                        {
                          "type": "button",
                          "action_id": "view_release",
                          "text": {
                            "type": "plain_text",
                            "text": "GitHub에서 보기"
                          },
                          "url": "${RELEASE_URL}"
                        }
                      ]
                    }
                  ]
                }
                EOF
                )

                # 메시지 전송
                curl -X POST -H 'Content-Type: application/json' --data "$SLACK_PAYLOAD" "$SLACK_WEBHOOK_URL"
