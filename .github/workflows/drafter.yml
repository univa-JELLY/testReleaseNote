# .github/workflows/drafter.yml
name: Draft new release

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  release-draft:
    name: Update Draft Release Notes
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set release date
        run: echo "RELEASE_DATE=$(date -u +%Y-%m-%d)" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh

      - name: Authenticate gh CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Run Release Drafter
        id: release-drafter
        uses: release-drafter/release-drafter@v6
        with:
          config-name: drafter-config.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Process release notes with PR descriptions
        id: clean-notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_DATE: ${{ env.RELEASE_DATE }}
        run: |
          RELEASE_ID=${{ steps.release-drafter.outputs.id }}
          if [ -z "$RELEASE_ID" ]; then
            echo "No release ID found. Skipping processing."
            exit 0
          fi

          # 원본 릴리스 노트 가져오기
          BODY=$(gh api repos/${{ github.repository }}/releases/$RELEASE_ID --jq '.body' || echo "")
          if [ -z "$BODY" ]; then
            echo "Could not get release body. Skipping processing."
            exit 0
          fi

          # 릴리스 노트에서 PR 번호 추출
          echo "Extracting PR numbers from release notes..."
          PR_PATTERN='- \*\*.*\(\#([0-9]+)\).*\*\*'
          PR_NUMBERS=$(echo "$BODY" | grep -oP '\(#\K[0-9]+(?=\))' || echo "")

          if [ -z "$PR_NUMBERS" ]; then
            echo "No PR numbers found in release notes."
          else
            echo "Found PR numbers: $PR_NUMBERS"
            
            # 각 PR에 대한 설명 가져와서 대체
            for PR_NUM in $PR_NUMBERS; do
              echo "Processing PR #$PR_NUM..."
              
              # PR 정보 가져오기
              PR_INFO=$(gh api repos/${{ github.repository }}/pulls/$PR_NUM --jq '{title: .title, body: .body}' 2>/dev/null || echo '{"title":"", "body":""}')
              
              # PR 제목과 설명 추출
              PR_TITLE=$(echo "$PR_INFO" | jq -r '.title')
              PR_BODY=$(echo "$PR_INFO" | jq -r '.body')
              
              if [ -z "$PR_TITLE" ] || [ "$PR_TITLE" = "null" ]; then
                echo "Could not get title for PR #$PR_NUM. Skipping."
                continue
              fi
              
              # PR 설명에서 유효한 내용 추출
              DESCRIPTION=$(echo "$PR_BODY" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
              if [ -z "$DESCRIPTION" ] || [ ${#DESCRIPTION} -lt 5 ]; then
                echo "PR #$PR_NUM has no valid description. Using title instead."
                DESCRIPTION="$PR_TITLE"
              else
                # PR 설명 전체 사용 (줄바꿈은 공백으로 변환하여 포맷 유지)
                DESCRIPTION=$(echo "$DESCRIPTION" | tr '\n' ' ' | sed 's/  / /g')
                
                # 설명이 너무 길면 자르기 (300자 제한)
                if [ ${#DESCRIPTION} -gt 300 ]; then
                  DESCRIPTION="${DESCRIPTION:0:297}..."
                fi
              fi
              
              # PR 제목을 설명으로 대체 (이스케이프 처리 필요)
              PR_TITLE_ESCAPED=$(echo "$PR_TITLE" | sed 's/[\/&]/\\&/g')
              DESCRIPTION_ESCAPED=$(echo "$DESCRIPTION" | sed 's/[\/&]/\\&/g')
              
              echo "Replacing title with description for PR #$PR_NUM"
              BODY=$(echo "$BODY" | sed "s/- \*\*$PR_TITLE_ESCAPED\( \)\?(#$PR_NUM).*\*\*/- **$DESCRIPTION_ESCAPED (#$PR_NUM)**/g")
            done
          fi

          # 접두사 제거 및 날짜 플레이스홀더 치환
          PROCESSED_BODY=$(echo "$BODY" \
            | sed 's/\[[A-Za-z0-9_-]\+\] //g' \
            | sed "s/RELEASE_DATE_PLACEHOLDER/$RELEASE_DATE/g"
          )

          # 수정된 내용으로 릴리스 업데이트
          echo "Updating GitHub release with processed content..."
          gh api repos/${{ github.repository }}/releases/$RELEASE_ID -X PATCH -F body="$PROCESSED_BODY"

          # 처리된 내용을 output으로 내보내기
          echo "cleaned_body<<EOF" >> $GITHUB_OUTPUT
          echo "$PROCESSED_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send to Slack
        if: success() && steps.release-drafter.outputs.id
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          RELEASE_VERSION: ${{ steps.release-drafter.outputs.tag_name }}
          RELEASE_URL: ${{ steps.release-drafter.outputs.html_url }}
          RELEASE_DATE: ${{ env.RELEASE_DATE }}
          RELEASE_BODY: ${{ steps.clean-notes.outputs.cleaned_body }}
        run: |
          # Slack 호환을 위해 Markdown 헤더(#)를 볼드체(*텍스트*)로 치환
          SLACK_BODY=$(echo "$RELEASE_BODY" | \
            sed 's/^### \(.*\)/*\1*/g; s/^## \(.*\)/*\1*/g; s/^# \(.*\)/*\1*/g' | \
            sed 's/\*\*//g')

          # 1500자 이상이면 자르고 안내 문구 덧붙이기
          if [ ${#SLACK_BODY} -gt 1500 ]; then
            SLACK_BODY="${SLACK_BODY:0:1500}...\n(릴리스 노트가 잘렸습니다. 전체 내용은 GitHub에서 확인하세요)"
          fi

          # jq 로 JSON 조립 (변수값 자동으로 이스케이프 됨)
          SLACK_PAYLOAD=$(jq -n \
            --arg text "🎉 새 릴리스 배포: $RELEASE_VERSION" \
            --arg version "$RELEASE_VERSION" \
            --arg date "$RELEASE_DATE" \
            --arg url "$RELEASE_URL" \
            --arg body "$SLACK_BODY" \
            '{
              text: $text,
              attachments: [
                {
                  color: "#36a64f",
                  pretext: "릴리스 노트:",
                  title: "\($version) (\($date))",
                  title_link: $url,
                  text: $body,
                  footer: "GitHub Release",
                  footer_icon: "https://github.githubassets.com/favicon.ico"
                }
              ]
            }'
          )

          # 디버깅: 페이로드 출력
          echo "$SLACK_PAYLOAD" | jq .

          # 실제 전송
          curl -X POST -H 'Content-Type: application/json' --data "$SLACK_PAYLOAD" "$SLACK_WEBHOOK_URL"
